
main_mod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007c  00800060  000005a8  0000063c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  008000dc  008000dc  000006b8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00000e09  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018c  00000000  00000000  00000e49  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000933  00000000  00000000  00000fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000428  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000007f1  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000110  00000000  00000000  00002524  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000027a  00000000  00000000  00002634  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000061e  00000000  00000000  000028ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000070  00000000  00000000  00002ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000030  00000000  00000000  00002f3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3d       	cpi	r26, 0xDC	; 220
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac ed       	ldi	r26, 0xDC	; 220
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3f       	cpi	r26, 0xFD	; 253
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  8a:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <fitPowerInByte>:
	COLORBLUEPORT 		&= (~COLORBLUE);
}

char fitPowerInByte(char power, char isYelow){
	char leds = 0;
	switch (power){
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	79 f0       	breq	.+30     	; 0xb4 <fitPowerInByte+0x22>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	18 f4       	brcc	.+6      	; 0xa0 <fitPowerInByte+0xe>
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	29 f4       	brne	.+10     	; 0xa8 <fitPowerInByte+0x16>
  9e:	06 c0       	rjmp	.+12     	; 0xac <fitPowerInByte+0x1a>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	61 f0       	breq	.+24     	; 0xbc <fitPowerInByte+0x2a>
  a4:	84 30       	cpi	r24, 0x04	; 4
  a6:	71 f0       	breq	.+28     	; 0xc4 <fitPowerInByte+0x32>
		case 0:
			return 0b00000000;
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	08 95       	ret
			break;
		case 1:
			return (isYelow ? 0b00001000 : 0b00000001 );
  ac:	66 23       	and	r22, r22
  ae:	61 f0       	breq	.+24     	; 0xc8 <fitPowerInByte+0x36>
  b0:	88 e0       	ldi	r24, 0x08	; 8
  b2:	08 95       	ret
			break;
		case 2:
			return (isYelow ? 0b00001100 : 0b00000011 );
  b4:	66 23       	and	r22, r22
  b6:	51 f0       	breq	.+20     	; 0xcc <fitPowerInByte+0x3a>
  b8:	8c e0       	ldi	r24, 0x0C	; 12
  ba:	08 95       	ret
			break;
		case 3:
			return (isYelow ? 0b00001110 : 0b00000111 );
  bc:	66 23       	and	r22, r22
  be:	41 f0       	breq	.+16     	; 0xd0 <fitPowerInByte+0x3e>
  c0:	8e e0       	ldi	r24, 0x0E	; 14
  c2:	08 95       	ret
			break;
		case 4:
			return 0b00001111;
  c4:	8f e0       	ldi	r24, 0x0F	; 15
  c6:	08 95       	ret
	switch (power){
		case 0:
			return 0b00000000;
			break;
		case 1:
			return (isYelow ? 0b00001000 : 0b00000001 );
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	08 95       	ret
			break;
		case 2:
			return (isYelow ? 0b00001100 : 0b00000011 );
  cc:	83 e0       	ldi	r24, 0x03	; 3
  ce:	08 95       	ret
			break;
		case 3:
			return (isYelow ? 0b00001110 : 0b00000111 );
  d0:	87 e0       	ldi	r24, 0x07	; 7
			break;
		default:
			return 0;
			break;
	}
}
  d2:	08 95       	ret

000000d4 <main>:

#define POINTNUMBER 1
#define POINTPOWER 2

int main ()
{
  d4:	ef 92       	push	r14
  d6:	ff 92       	push	r15
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	00 d0       	rcall	.+0      	; 0xe2 <main+0xe>
  e2:	00 d0       	rcall	.+0      	; 0xe4 <main+0x10>
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
	Init_Spi();
  e8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <Init_Spi>
	RFM73_Initialize();
  ec:	0e 94 a0 01 	call	0x340	; 0x340 <RFM73_Initialize>
	SwitchToRxMode();
  f0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <SwitchToRxMode>

	COLORYELOWDDRPORT 	|= COLORYELOW;
  f4:	8a b3       	in	r24, 0x1a	; 26
  f6:	80 6f       	ori	r24, 0xF0	; 240
  f8:	8a bb       	out	0x1a, r24	; 26
	COLORYELOWPORT 		|= COLORYELOW;
  fa:	8b b3       	in	r24, 0x1b	; 27
  fc:	80 6f       	ori	r24, 0xF0	; 240
  fe:	8b bb       	out	0x1b, r24	; 27
	COLORGREENDDRPORT 	|= COLORGREEN;
 100:	84 b3       	in	r24, 0x14	; 20
 102:	80 6f       	ori	r24, 0xF0	; 240
 104:	84 bb       	out	0x14, r24	; 20
	COLORGREENPORT 		|= COLORGREEN;
 106:	85 b3       	in	r24, 0x15	; 21
 108:	80 6f       	ori	r24, 0xF0	; 240
 10a:	85 bb       	out	0x15, r24	; 21
	COLORBLUEDDRPORT 	|= COLORBLUE;
 10c:	84 b3       	in	r24, 0x14	; 20
 10e:	8f 60       	ori	r24, 0x0F	; 15
 110:	84 bb       	out	0x14, r24	; 20
	COLORBLUEPORT 		|= COLORBLUE;
 112:	85 b3       	in	r24, 0x15	; 21
 114:	8f 60       	ori	r24, 0x0F	; 15
 116:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	8f e7       	ldi	r24, 0x7F	; 127
 11a:	9a e1       	ldi	r25, 0x1A	; 26
 11c:	a6 e0       	ldi	r26, 0x06	; 6
 11e:	81 50       	subi	r24, 0x01	; 1
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	a0 40       	sbci	r26, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x4a>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x54>
 128:	00 00       	nop
#define UNITCOUNT 3

	while (1)
	{
		char less_power[UNITCOUNT];
		for (char j=0; j<UNITCOUNT; j++) less_power[j] = NOSIGNAL;
 12a:	80 e0       	ldi	r24, 0x00	; 0
			_delay_ms(10);

			UINT8 len = Receive_Packet(rx_buf, MAX_PACKET_LEN);
			if (len > 0){
				//INVBIT(PORTC,1);
				if (rx_buf[POINTPOWER] < less_power[rx_buf[POINTNUMBER]])
 12c:	8e 01       	movw	r16, r28
 12e:	0f 5f       	subi	r16, 0xFF	; 255
 130:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		*/

		char power = 0;
		
		power = fitPowerInByte(POWERCOUNT - less_power[0] , 1);
 132:	24 e0       	ldi	r18, 0x04	; 4
 134:	f2 2e       	mov	r15, r18
#define UNITCOUNT 3

	while (1)
	{
		char less_power[UNITCOUNT];
		for (char j=0; j<UNITCOUNT; j++) less_power[j] = NOSIGNAL;
 136:	95 e0       	ldi	r25, 0x05	; 5
 138:	e9 2e       	mov	r14, r25
 13a:	05 c0       	rjmp	.+10     	; 0x146 <main+0x72>
 13c:	f8 01       	movw	r30, r16
 13e:	e8 0f       	add	r30, r24
 140:	f1 1d       	adc	r31, r1
 142:	e0 82       	st	Z, r14
 144:	8f 5f       	subi	r24, 0xFF	; 255
 146:	83 30       	cpi	r24, 0x03	; 3
 148:	c8 f3       	brcs	.-14     	; 0x13c <main+0x68>
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	a3 ec       	ldi	r26, 0xC3	; 195
 14e:	b9 e0       	ldi	r27, 0x09	; 9
 150:	11 97       	sbiw	r26, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <main+0x7c>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x82>
 156:	00 00       	nop

		// get statistic of unit power 
		for(char i = 0; i < 96; i++){
			_delay_ms(10);

			UINT8 len = Receive_Packet(rx_buf, MAX_PACKET_LEN);
 158:	8c ed       	ldi	r24, 0xDC	; 220
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	60 e2       	ldi	r22, 0x20	; 32
 15e:	2c 83       	std	Y+4, r18	; 0x04
 160:	0e 94 a6 02 	call	0x54c	; 0x54c <Receive_Packet>
			if (len > 0){
 164:	2c 81       	ldd	r18, Y+4	; 0x04
 166:	88 23       	and	r24, r24
 168:	59 f0       	breq	.+22     	; 0x180 <main+0xac>
				//INVBIT(PORTC,1);
				if (rx_buf[POINTPOWER] < less_power[rx_buf[POINTNUMBER]])
 16a:	80 91 de 00 	lds	r24, 0x00DE
 16e:	90 91 dd 00 	lds	r25, 0x00DD
 172:	f8 01       	movw	r30, r16
 174:	e9 0f       	add	r30, r25
 176:	f1 1d       	adc	r31, r1
 178:	90 81       	ld	r25, Z
 17a:	89 17       	cp	r24, r25
 17c:	08 f4       	brcc	.+2      	; 0x180 <main+0xac>
					less_power[rx_buf[POINTNUMBER]] = rx_buf[POINTPOWER];
 17e:	80 83       	st	Z, r24
	{
		char less_power[UNITCOUNT];
		for (char j=0; j<UNITCOUNT; j++) less_power[j] = NOSIGNAL;

		// get statistic of unit power 
		for(char i = 0; i < 96; i++){
 180:	2f 5f       	subi	r18, 0xFF	; 255
 182:	20 36       	cpi	r18, 0x60	; 96
 184:	19 f7       	brne	.-58     	; 0x14c <main+0x78>
		}
		*/

		char power = 0;
		
		power = fitPowerInByte(POWERCOUNT - less_power[0] , 1);
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	bf 2d       	mov	r27, r15
 18a:	b8 1b       	sub	r27, r24
 18c:	8b 2f       	mov	r24, r27
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	0e 94 49 00 	call	0x92	; 0x92 <fitPowerInByte>
		COLORYELOWPORT = (power << 4);
 194:	82 95       	swap	r24
 196:	80 7f       	andi	r24, 0xF0	; 240
 198:	8b bb       	out	0x1b, r24	; 27

		power = fitPowerInByte(POWERCOUNT - less_power[1] , 0);
 19a:	8a 81       	ldd	r24, Y+2	; 0x02
 19c:	9f 2d       	mov	r25, r15
 19e:	98 1b       	sub	r25, r24
 1a0:	89 2f       	mov	r24, r25
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	0e 94 49 00 	call	0x92	; 0x92 <fitPowerInByte>
		COLORGREENPORT &= 0x0F;
 1a8:	95 b3       	in	r25, 0x15	; 21
 1aa:	9f 70       	andi	r25, 0x0F	; 15
 1ac:	95 bb       	out	0x15, r25	; 21
		COLORGREENPORT |= (power << 4);
 1ae:	95 b3       	in	r25, 0x15	; 21
 1b0:	82 95       	swap	r24
 1b2:	80 7f       	andi	r24, 0xF0	; 240
 1b4:	89 2b       	or	r24, r25
 1b6:	85 bb       	out	0x15, r24	; 21

		power = fitPowerInByte(POWERCOUNT - less_power[2] , 0);
 1b8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ba:	af 2d       	mov	r26, r15
 1bc:	a8 1b       	sub	r26, r24
 1be:	8a 2f       	mov	r24, r26
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	0e 94 49 00 	call	0x92	; 0x92 <fitPowerInByte>
		COLORBLUEPORT &= 0xF0;
 1c6:	95 b3       	in	r25, 0x15	; 21
 1c8:	90 7f       	andi	r25, 0xF0	; 240
 1ca:	95 bb       	out	0x15, r25	; 21
		COLORBLUEPORT |= power;
 1cc:	95 b3       	in	r25, 0x15	; 21
 1ce:	98 2b       	or	r25, r24
 1d0:	95 bb       	out	0x15, r25	; 21
#define UNITCOUNT 3

	while (1)
	{
		char less_power[UNITCOUNT];
		for (char j=0; j<UNITCOUNT; j++) less_power[j] = NOSIGNAL;
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	b3 cf       	rjmp	.-154    	; 0x13c <main+0x68>

000001d6 <Init_Spi>:
 1d6:	18 ba       	out	0x18, r1	; 24
 1d8:	88 eb       	ldi	r24, 0xB8	; 184
 1da:	87 bb       	out	0x17, r24	; 23
 1dc:	81 e5       	ldi	r24, 0x51	; 81
 1de:	8d b9       	out	0x0d, r24	; 13
 1e0:	1e b8       	out	0x0e, r1	; 14
 1e2:	08 95       	ret

000001e4 <ReadWrite_Spi>:
 1e4:	8f b9       	out	0x0f, r24	; 15
 1e6:	77 9b       	sbis	0x0e, 7	; 14
 1e8:	fe cf       	rjmp	.-4      	; 0x1e6 <ReadWrite_Spi+0x2>
 1ea:	8f b1       	in	r24, 0x0f	; 15
 1ec:	08 95       	ret

000001ee <SPI_Write_Reg>:
 1ee:	df 93       	push	r29
 1f0:	cf 93       	push	r28
 1f2:	0f 92       	push	r0
 1f4:	cd b7       	in	r28, 0x3d	; 61
 1f6:	de b7       	in	r29, 0x3e	; 62
 1f8:	c4 98       	cbi	0x18, 4	; 24
 1fa:	69 83       	std	Y+1, r22	; 0x01
 1fc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ReadWrite_Spi>
 200:	80 93 fc 00 	sts	0x00FC, r24
 204:	69 81       	ldd	r22, Y+1	; 0x01
 206:	86 2f       	mov	r24, r22
 208:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ReadWrite_Spi>
 20c:	c4 9a       	sbi	0x18, 4	; 24
 20e:	0f 90       	pop	r0
 210:	cf 91       	pop	r28
 212:	df 91       	pop	r29
 214:	08 95       	ret

00000216 <SPI_Read_Reg>:
 216:	c4 98       	cbi	0x18, 4	; 24
 218:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ReadWrite_Spi>
 21c:	80 93 fc 00 	sts	0x00FC, r24
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ReadWrite_Spi>
 226:	c4 9a       	sbi	0x18, 4	; 24
 228:	08 95       	ret

0000022a <SPI_Read_Buf>:
 22a:	ef 92       	push	r14
 22c:	ff 92       	push	r15
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
 232:	df 93       	push	r29
 234:	cf 93       	push	r28
 236:	0f 92       	push	r0
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	16 2f       	mov	r17, r22
 23e:	04 2f       	mov	r16, r20
 240:	c4 98       	cbi	0x18, 4	; 24
 242:	79 83       	std	Y+1, r23	; 0x01
 244:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ReadWrite_Spi>
 248:	79 81       	ldd	r23, Y+1	; 0x01
 24a:	41 2f       	mov	r20, r17
 24c:	57 2f       	mov	r21, r23
 24e:	7a 01       	movw	r14, r20
 250:	06 c0       	rjmp	.+12     	; 0x25e <SPI_Read_Buf+0x34>
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ReadWrite_Spi>
 258:	f7 01       	movw	r30, r14
 25a:	81 93       	st	Z+, r24
 25c:	7f 01       	movw	r14, r30
 25e:	8e 2d       	mov	r24, r14
 260:	81 1b       	sub	r24, r17
 262:	80 17       	cp	r24, r16
 264:	b0 f3       	brcs	.-20     	; 0x252 <SPI_Read_Buf+0x28>
 266:	c4 9a       	sbi	0x18, 4	; 24
 268:	0f 90       	pop	r0
 26a:	cf 91       	pop	r28
 26c:	df 91       	pop	r29
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	ff 90       	pop	r15
 274:	ef 90       	pop	r14
 276:	08 95       	ret

00000278 <SPI_Write_Buf>:
 278:	ef 92       	push	r14
 27a:	ff 92       	push	r15
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	df 93       	push	r29
 282:	cf 93       	push	r28
 284:	0f 92       	push	r0
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
 28a:	16 2f       	mov	r17, r22
 28c:	04 2f       	mov	r16, r20
 28e:	c4 98       	cbi	0x18, 4	; 24
 290:	79 83       	std	Y+1, r23	; 0x01
 292:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ReadWrite_Spi>
 296:	80 93 fc 00 	sts	0x00FC, r24
 29a:	79 81       	ldd	r23, Y+1	; 0x01
 29c:	41 2f       	mov	r20, r17
 29e:	57 2f       	mov	r21, r23
 2a0:	7a 01       	movw	r14, r20
 2a2:	05 c0       	rjmp	.+10     	; 0x2ae <SPI_Write_Buf+0x36>
 2a4:	f7 01       	movw	r30, r14
 2a6:	81 91       	ld	r24, Z+
 2a8:	7f 01       	movw	r14, r30
 2aa:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ReadWrite_Spi>
 2ae:	8e 2d       	mov	r24, r14
 2b0:	81 1b       	sub	r24, r17
 2b2:	80 17       	cp	r24, r16
 2b4:	b8 f3       	brcs	.-18     	; 0x2a4 <SPI_Write_Buf+0x2c>
 2b6:	c4 9a       	sbi	0x18, 4	; 24
 2b8:	0f 90       	pop	r0
 2ba:	cf 91       	pop	r28
 2bc:	df 91       	pop	r29
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16
 2c2:	ff 90       	pop	r15
 2c4:	ef 90       	pop	r14
 2c6:	08 95       	ret

000002c8 <SwitchToRxMode>:
 2c8:	82 ee       	ldi	r24, 0xE2	; 226
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SPI_Write_Reg>
 2d0:	87 e0       	ldi	r24, 0x07	; 7
 2d2:	0e 94 0b 01 	call	0x216	; 0x216 <SPI_Read_Reg>
 2d6:	68 2f       	mov	r22, r24
 2d8:	87 e2       	ldi	r24, 0x27	; 39
 2da:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SPI_Write_Reg>
 2de:	c3 98       	cbi	0x18, 3	; 24
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	0e 94 0b 01 	call	0x216	; 0x216 <SPI_Read_Reg>
 2e6:	68 2f       	mov	r22, r24
 2e8:	61 60       	ori	r22, 0x01	; 1
 2ea:	80 e2       	ldi	r24, 0x20	; 32
 2ec:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SPI_Write_Reg>
 2f0:	c3 9a       	sbi	0x18, 3	; 24
 2f2:	08 95       	ret

000002f4 <SwitchToTxMode>:
 2f4:	81 ee       	ldi	r24, 0xE1	; 225
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SPI_Write_Reg>
 2fc:	c3 98       	cbi	0x18, 3	; 24
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	0e 94 0b 01 	call	0x216	; 0x216 <SPI_Read_Reg>
 304:	68 2f       	mov	r22, r24
 306:	6e 7f       	andi	r22, 0xFE	; 254
 308:	80 e2       	ldi	r24, 0x20	; 32
 30a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SPI_Write_Reg>
 30e:	c3 9a       	sbi	0x18, 3	; 24
 310:	08 95       	ret

00000312 <SwitchCFG>:
 312:	1f 93       	push	r17
 314:	18 2f       	mov	r17, r24
 316:	87 e0       	ldi	r24, 0x07	; 7
 318:	0e 94 0b 01 	call	0x216	; 0x216 <SPI_Read_Reg>
 31c:	87 ff       	sbrs	r24, 7
 31e:	03 c0       	rjmp	.+6      	; 0x326 <SwitchCFG+0x14>
 320:	11 23       	and	r17, r17
 322:	19 f0       	breq	.+6      	; 0x32a <SwitchCFG+0x18>
 324:	06 c0       	rjmp	.+12     	; 0x332 <SwitchCFG+0x20>
 326:	11 23       	and	r17, r17
 328:	21 f0       	breq	.+8      	; 0x332 <SwitchCFG+0x20>
 32a:	80 e5       	ldi	r24, 0x50	; 80
 32c:	63 e5       	ldi	r22, 0x53	; 83
 32e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SPI_Write_Reg>
 332:	1f 91       	pop	r17
 334:	08 95       	ret

00000336 <SetChannelNum>:
 336:	68 2f       	mov	r22, r24
 338:	85 e2       	ldi	r24, 0x25	; 37
 33a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SPI_Write_Reg>
 33e:	08 95       	ret

00000340 <RFM73_Initialize>:
 340:	cf 92       	push	r12
 342:	df 92       	push	r13
 344:	ef 92       	push	r14
 346:	ff 92       	push	r15
 348:	0f 93       	push	r16
 34a:	1f 93       	push	r17
 34c:	df 93       	push	r29
 34e:	cf 93       	push	r28
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
 354:	2d 97       	sbiw	r28, 0x0d	; 13
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	f8 94       	cli
 35a:	de bf       	out	0x3e, r29	; 62
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	cd bf       	out	0x3d, r28	; 61
 360:	8f e4       	ldi	r24, 0x4F	; 79
 362:	93 ec       	ldi	r25, 0xC3	; 195
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <RFM73_Initialize+0x24>
 368:	00 c0       	rjmp	.+0      	; 0x36a <RFM73_Initialize+0x2a>
 36a:	00 00       	nop
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	0e 94 89 01 	call	0x312	; 0x312 <SwitchCFG>
 372:	03 ea       	ldi	r16, 0xA3	; 163
 374:	10 e0       	ldi	r17, 0x00	; 0
 376:	f8 01       	movw	r30, r16
 378:	80 81       	ld	r24, Z
 37a:	80 62       	ori	r24, 0x20	; 32
 37c:	61 81       	ldd	r22, Z+1	; 0x01
 37e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SPI_Write_Reg>
 382:	0e 5f       	subi	r16, 0xFE	; 254
 384:	1f 4f       	sbci	r17, 0xFF	; 255
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	0b 3c       	cpi	r16, 0xCB	; 203
 38a:	1f 07       	cpc	r17, r31
 38c:	a1 f7       	brne	.-24     	; 0x376 <RFM73_Initialize+0x36>
 38e:	34 e3       	ldi	r19, 0x34	; 52
 390:	c3 2e       	mov	r12, r19
 392:	c9 82       	std	Y+1, r12	; 0x01
 394:	23 e4       	ldi	r18, 0x43	; 67
 396:	d2 2e       	mov	r13, r18
 398:	da 82       	std	Y+2, r13	; 0x02
 39a:	90 e1       	ldi	r25, 0x10	; 16
 39c:	e9 2e       	mov	r14, r25
 39e:	eb 82       	std	Y+3, r14	; 0x03
 3a0:	ec 82       	std	Y+4, r14	; 0x04
 3a2:	ff 24       	eor	r15, r15
 3a4:	f3 94       	inc	r15
 3a6:	fd 82       	std	Y+5, r15	; 0x05
 3a8:	8a e2       	ldi	r24, 0x2A	; 42
 3aa:	8e 01       	movw	r16, r28
 3ac:	0f 5f       	subi	r16, 0xFF	; 255
 3ae:	1f 4f       	sbci	r17, 0xFF	; 255
 3b0:	b8 01       	movw	r22, r16
 3b2:	45 e0       	ldi	r20, 0x05	; 5
 3b4:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write_Buf>
 3b8:	89 e3       	ldi	r24, 0x39	; 57
 3ba:	89 83       	std	Y+1, r24	; 0x01
 3bc:	88 e3       	ldi	r24, 0x38	; 56
 3be:	8a 83       	std	Y+2, r24	; 0x02
 3c0:	87 e3       	ldi	r24, 0x37	; 55
 3c2:	8b 83       	std	Y+3, r24	; 0x03
 3c4:	86 e3       	ldi	r24, 0x36	; 54
 3c6:	8c 83       	std	Y+4, r24	; 0x04
 3c8:	82 ec       	ldi	r24, 0xC2	; 194
 3ca:	8d 83       	std	Y+5, r24	; 0x05
 3cc:	8b e2       	ldi	r24, 0x2B	; 43
 3ce:	b8 01       	movw	r22, r16
 3d0:	45 e0       	ldi	r20, 0x05	; 5
 3d2:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write_Buf>
 3d6:	c9 82       	std	Y+1, r12	; 0x01
 3d8:	da 82       	std	Y+2, r13	; 0x02
 3da:	eb 82       	std	Y+3, r14	; 0x03
 3dc:	ec 82       	std	Y+4, r14	; 0x04
 3de:	fd 82       	std	Y+5, r15	; 0x05
 3e0:	80 e3       	ldi	r24, 0x30	; 48
 3e2:	b8 01       	movw	r22, r16
 3e4:	45 e0       	ldi	r20, 0x05	; 5
 3e6:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write_Buf>
 3ea:	8d e1       	ldi	r24, 0x1D	; 29
 3ec:	0e 94 0b 01 	call	0x216	; 0x216 <SPI_Read_Reg>
 3f0:	88 23       	and	r24, r24
 3f2:	21 f4       	brne	.+8      	; 0x3fc <RFM73_Initialize+0xbc>
 3f4:	80 e5       	ldi	r24, 0x50	; 80
 3f6:	63 e7       	ldi	r22, 0x73	; 115
 3f8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SPI_Write_Reg>
 3fc:	8d e3       	ldi	r24, 0x3D	; 61
 3fe:	67 e0       	ldi	r22, 0x07	; 7
 400:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SPI_Write_Reg>
 404:	8c e3       	ldi	r24, 0x3C	; 60
 406:	6f e3       	ldi	r22, 0x3F	; 63
 408:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SPI_Write_Reg>
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	0e 94 89 01 	call	0x312	; 0x312 <SwitchCFG>
 412:	00 e6       	ldi	r16, 0x60	; 96
 414:	10 e0       	ldi	r17, 0x00	; 0
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	7e 01       	movw	r14, r28
 41a:	08 94       	sec
 41c:	e1 1c       	adc	r14, r1
 41e:	f1 1c       	adc	r15, r1
 420:	f8 01       	movw	r30, r16
 422:	21 91       	ld	r18, Z+
 424:	31 91       	ld	r19, Z+
 426:	41 91       	ld	r20, Z+
 428:	51 91       	ld	r21, Z+
 42a:	8f 01       	movw	r16, r30
 42c:	29 83       	std	Y+1, r18	; 0x01
 42e:	3a 83       	std	Y+2, r19	; 0x02
 430:	4b 83       	std	Y+3, r20	; 0x03
 432:	5c 83       	std	Y+4, r21	; 0x04
 434:	89 2f       	mov	r24, r25
 436:	80 62       	ori	r24, 0x20	; 32
 438:	b7 01       	movw	r22, r14
 43a:	44 e0       	ldi	r20, 0x04	; 4
 43c:	9d 87       	std	Y+13, r25	; 0x0d
 43e:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write_Buf>
 442:	9d 85       	ldd	r25, Y+13	; 0x0d
 444:	9f 5f       	subi	r25, 0xFF	; 255
 446:	99 30       	cpi	r25, 0x09	; 9
 448:	59 f7       	brne	.-42     	; 0x420 <RFM73_Initialize+0xe0>
 44a:	84 e8       	ldi	r24, 0x84	; 132
 44c:	e8 2e       	mov	r14, r24
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	f8 2e       	mov	r15, r24
 452:	8e 01       	movw	r16, r28
 454:	0f 5f       	subi	r16, 0xFF	; 255
 456:	1f 4f       	sbci	r17, 0xFF	; 255
 458:	f7 01       	movw	r30, r14
 45a:	21 91       	ld	r18, Z+
 45c:	31 91       	ld	r19, Z+
 45e:	41 91       	ld	r20, Z+
 460:	51 91       	ld	r21, Z+
 462:	7f 01       	movw	r14, r30
 464:	59 83       	std	Y+1, r21	; 0x01
 466:	4a 83       	std	Y+2, r20	; 0x02
 468:	3b 83       	std	Y+3, r19	; 0x03
 46a:	2c 83       	std	Y+4, r18	; 0x04
 46c:	89 2f       	mov	r24, r25
 46e:	80 62       	ori	r24, 0x20	; 32
 470:	b8 01       	movw	r22, r16
 472:	44 e0       	ldi	r20, 0x04	; 4
 474:	9d 87       	std	Y+13, r25	; 0x0d
 476:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write_Buf>
 47a:	9d 85       	ldd	r25, Y+13	; 0x0d
 47c:	9f 5f       	subi	r25, 0xFF	; 255
 47e:	9e 30       	cpi	r25, 0x0E	; 14
 480:	59 f7       	brne	.-42     	; 0x458 <RFM73_Initialize+0x118>
 482:	e8 e9       	ldi	r30, 0x98	; 152
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	d8 01       	movw	r26, r16
 488:	81 91       	ld	r24, Z+
 48a:	8d 93       	st	X+, r24
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	e3 3a       	cpi	r30, 0xA3	; 163
 490:	f8 07       	cpc	r31, r24
 492:	d1 f7       	brne	.-12     	; 0x488 <__stack+0x29>
 494:	8e e2       	ldi	r24, 0x2E	; 46
 496:	8e 01       	movw	r16, r28
 498:	0f 5f       	subi	r16, 0xFF	; 255
 49a:	1f 4f       	sbci	r17, 0xFF	; 255
 49c:	b8 01       	movw	r22, r16
 49e:	4b e0       	ldi	r20, 0x0B	; 11
 4a0:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write_Buf>
 4a4:	86 e9       	ldi	r24, 0x96	; 150
 4a6:	8a 83       	std	Y+2, r24	; 0x02
 4a8:	82 e8       	ldi	r24, 0x82	; 130
 4aa:	8b 83       	std	Y+3, r24	; 0x03
 4ac:	8b e1       	ldi	r24, 0x1B	; 27
 4ae:	8c 83       	std	Y+4, r24	; 0x04
 4b0:	8f ed       	ldi	r24, 0xDF	; 223
 4b2:	89 83       	std	Y+1, r24	; 0x01
 4b4:	84 e2       	ldi	r24, 0x24	; 36
 4b6:	b8 01       	movw	r22, r16
 4b8:	44 e0       	ldi	r20, 0x04	; 4
 4ba:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write_Buf>
 4be:	89 81       	ldd	r24, Y+1	; 0x01
 4c0:	89 7f       	andi	r24, 0xF9	; 249
 4c2:	89 83       	std	Y+1, r24	; 0x01
 4c4:	84 e2       	ldi	r24, 0x24	; 36
 4c6:	b8 01       	movw	r22, r16
 4c8:	44 e0       	ldi	r20, 0x04	; 4
 4ca:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write_Buf>
 4ce:	e3 ed       	ldi	r30, 0xD3	; 211
 4d0:	f0 e3       	ldi	r31, 0x30	; 48
 4d2:	31 97       	sbiw	r30, 0x01	; 1
 4d4:	f1 f7       	brne	.-4      	; 0x4d2 <__stack+0x73>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <__stack+0x79>
 4d8:	00 00       	nop
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	0e 94 89 01 	call	0x312	; 0x312 <SwitchCFG>
 4e0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <SwitchToRxMode>
 4e4:	2d 96       	adiw	r28, 0x0d	; 13
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	f8 94       	cli
 4ea:	de bf       	out	0x3e, r29	; 62
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	cd bf       	out	0x3d, r28	; 61
 4f0:	cf 91       	pop	r28
 4f2:	df 91       	pop	r29
 4f4:	1f 91       	pop	r17
 4f6:	0f 91       	pop	r16
 4f8:	ff 90       	pop	r15
 4fa:	ef 90       	pop	r14
 4fc:	df 90       	pop	r13
 4fe:	cf 90       	pop	r12
 500:	08 95       	ret

00000502 <Send_Packet>:
 502:	ef 92       	push	r14
 504:	ff 92       	push	r15
 506:	1f 93       	push	r17
 508:	df 93       	push	r29
 50a:	cf 93       	push	r28
 50c:	0f 92       	push	r0
 50e:	cd b7       	in	r28, 0x3d	; 61
 510:	de b7       	in	r29, 0x3e	; 62
 512:	18 2f       	mov	r17, r24
 514:	7b 01       	movw	r14, r22
 516:	49 83       	std	Y+1, r20	; 0x01
 518:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <SwitchToTxMode>
 51c:	87 e1       	ldi	r24, 0x17	; 23
 51e:	0e 94 0b 01 	call	0x216	; 0x216 <SPI_Read_Reg>
 522:	49 81       	ldd	r20, Y+1	; 0x01
 524:	85 fd       	sbrc	r24, 5
 526:	0a c0       	rjmp	.+20     	; 0x53c <Send_Packet+0x3a>
 528:	81 2f       	mov	r24, r17
 52a:	b7 01       	movw	r22, r14
 52c:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write_Buf>
 530:	87 ea       	ldi	r24, 0xA7	; 167
 532:	91 e6       	ldi	r25, 0x61	; 97
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	f1 f7       	brne	.-4      	; 0x534 <Send_Packet+0x32>
 538:	00 c0       	rjmp	.+0      	; 0x53a <Send_Packet+0x38>
 53a:	00 00       	nop
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	0f 90       	pop	r0
 540:	cf 91       	pop	r28
 542:	df 91       	pop	r29
 544:	1f 91       	pop	r17
 546:	ff 90       	pop	r15
 548:	ef 90       	pop	r14
 54a:	08 95       	ret

0000054c <Receive_Packet>:
 54c:	0f 93       	push	r16
 54e:	1f 93       	push	r17
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	ec 01       	movw	r28, r24
 556:	87 e0       	ldi	r24, 0x07	; 7
 558:	0e 94 0b 01 	call	0x216	; 0x216 <SPI_Read_Reg>
 55c:	08 2f       	mov	r16, r24
 55e:	86 ff       	sbrs	r24, 6
 560:	16 c0       	rjmp	.+44     	; 0x58e <Receive_Packet+0x42>
 562:	80 e6       	ldi	r24, 0x60	; 96
 564:	0e 94 0b 01 	call	0x216	; 0x216 <SPI_Read_Reg>
 568:	18 2f       	mov	r17, r24
 56a:	81 32       	cpi	r24, 0x21	; 33
 56c:	30 f4       	brcc	.+12     	; 0x57a <Receive_Packet+0x2e>
 56e:	81 e6       	ldi	r24, 0x61	; 97
 570:	be 01       	movw	r22, r28
 572:	41 2f       	mov	r20, r17
 574:	0e 94 15 01 	call	0x22a	; 0x22a <SPI_Read_Buf>
 578:	04 c0       	rjmp	.+8      	; 0x582 <Receive_Packet+0x36>
 57a:	82 ee       	ldi	r24, 0xE2	; 226
 57c:	60 e0       	ldi	r22, 0x00	; 0
 57e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SPI_Write_Reg>
 582:	87 e1       	ldi	r24, 0x17	; 23
 584:	0e 94 0b 01 	call	0x216	; 0x216 <SPI_Read_Reg>
 588:	80 ff       	sbrs	r24, 0
 58a:	eb cf       	rjmp	.-42     	; 0x562 <Receive_Packet+0x16>
 58c:	01 c0       	rjmp	.+2      	; 0x590 <Receive_Packet+0x44>
 58e:	10 e0       	ldi	r17, 0x00	; 0
 590:	87 e2       	ldi	r24, 0x27	; 39
 592:	60 2f       	mov	r22, r16
 594:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SPI_Write_Reg>
 598:	81 2f       	mov	r24, r17
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	1f 91       	pop	r17
 5a0:	0f 91       	pop	r16
 5a2:	08 95       	ret

000005a4 <_exit>:
 5a4:	f8 94       	cli

000005a6 <__stop_program>:
 5a6:	ff cf       	rjmp	.-2      	; 0x5a6 <__stop_program>
